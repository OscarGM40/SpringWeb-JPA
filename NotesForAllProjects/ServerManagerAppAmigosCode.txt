					SERVER MANAGER APP WITH SPRING-MYSQL AND ANGULAR

Source: https://www.youtube.com/watch?v=8ZPsZBcue50&t=5637s

Empezamos creando un proyecto con Spring Initializr con las dependencies Spring Web,Mysql Driver,Spring Data JPA, Lombok y Validation.Usaremos Maven.
NOTA: Spring Web usa Apache Tomcat como default embebbed server

			CREANDO EL MODELO

Lo primero que vamos a hacer es crear los modelos(fijate que los llama también domains).Va a ser muy sencillo,ni siquiera hay relaciones.Fijate en el uso de lombok:

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Server {

  @Id @GeneratedValue(strategy = GenerationType.AUTO)
  private Long id;
  @Column(unique = true) // no queremos la misma IP dos veces
  @NotEmpty(message = "Ip Address cannot be empty or null")
  private String ipAddress;
  private String name;
  private String memory;
  private String type;
  private String imageUrl;
  private Status status; // enum
}

Fijate como luce la enum(primero,va en minusculas,segundo,lleva una propiedad de campo de tipo string,parece que requiere al menos una).
public enum Status {
  SERVER_UP("SERVER_UP"),
  SERVER_DOWN("SERVER_DOWN");

  private final String status;

  Status(String status){
    this.status = status;
  }

  public String getStatus(){
    return this.status;
  }
}
Ahora nos falta definir la forma en la que manipularemos los datos en la database,es decir,que hará al guardar un Server,al borrarlo,... es aqui donde entra JPA.

					REPOSITORIES - SPRING DATA JPA

Creo el package repository y una interfaz(ServerRepo.java).Esta interfaz heredará de la clase JpaRepository<Domain,ID>.Sólo por heredarla,tendré acceso a métodos como find,findAll,findAllById,save,...Éstos no tengo que definirlos manualmente,pues me los da la superclase,pero si que tengo que definir cualquier otro que quiera usar(por ejemplo,buscar por ipAddress).El nombre del método es crucial,pues va a hacerse un select by con ese nombre.

@Repository
public interface ServerRepo extends JpaRepository<Server, Long> {
  Server findByIpAddress(String ipAddress);
}
IMPORTANTE: fijate que el campo ipAddress es único,esto es importante,si no deberiía haber sido findAllByXXX(por ejemplo buscar por nombre)

TIP:puedo observar que los pasos siempre son los mismos,mapear una clase a una Entidad,crearla un repositorio de acceso a datos y despues un servicio donde defino métodos para la funcionalidad que quiera.El servicio lo consumirán los controladores,o cualquier otro archivo/método que lo necesite.

					SERVICES

Fijate que de momento creo una abstracción donde defino los métodos que usaré,pero no los desarrollo.Puedo definir lo que quiera,pero fijate que JpaRepository se quedó muy corto y hay que hacer esto.

public interface ServerService {
  Server create(Server server);
  Server ping(String ipAddress);
  Collection<Server> list(int limit);
  Server get(Long id);
  Server update(Server server);
  Boolean delete(Long id);
}

Vayamos con las implementaciones.Crearemos otro folder para ello.Lo llamaré implementations.Será una clase que implemente la interfaz(fijate que a esta si que la anoto con @Service para inyectarla):

public class ServerServiceImpl implements ServerService {
* En este punto podría meter la clase en el folder Services y hacer la interfaz privada,o dejarla pública y puedo meter esa clase en su propio folder.

			REQUIRED ARGS CONSTRUCTOR ANNOTATION

Con la anotación @RequiredArgsConstructor sobre una clase Lombok va a meter todos los campos de clase en un constructor,es decir,que crea el constructor con los campos:

Es decir,esto:
@RequiredArgsConstructor
public class ServerServiceImpl {
  private final ServerRepo serverRepo;

es equivalente a esto:
public class ServerServiceImpl {
  private final ServerRepo serverRepo;
  constructor(ServerRepo serverRepo){
    this.serverRepo = serverRepo;

IMPORTANTE: y al realizar esto se va a dar la inyección de dependencias,realmente es para lo que lo hacemos.Fijate también que si un método lanza una excepción tengo que decirlo cuando lo defina en la abstracción:

  @Override
  public Server ping(String ipAddress) throws IOException { <- esto implica que
    log.info("Pinging Server IP: {}", ipAddress);
    // primero lo busco,despues le hago ping
    Server server = serverRepo.findByIpAddress(ipAddress);
    InetAddress inetAddress = InetAddress.getByName(ipAddress);
    // InetAddress.isReachable(timeout máximo)
    server.setStatus(inetAddress.isReachable(10000) ? Status.SERVER_UP : Status.SERVER_DOWN);
    // tras cambiarle el estado lo guardo
    serverRepo.save(server);
    return server;
  }

Ese throws implica que lo defina ya en el padre:
 Server ping(String ipAddress) throws UnknownHostException, IOException;
Además,lo mejor es usar try/catch y no lavarse las manos como estamos haciendo
NOTA: fijate que hemos usado la clase java.net.InetAddress para hacer el ping.

Recuerda que en una app real un servicio no va a ser tan sencillo como esto:
  @Override
  public Server get(Long id) {
    log.info("Fetching server with id: {}",id);
    return serverRepo.findById(id).get();
  }
Habrá validaciones,testing,...
Fijate como va a ser el helper que decidirá entre 4 imagenes de forma aleatoria una de ellas:

private String setServerImageUrl() {
  String[] imageNames = {"server1.png","server2.png","server3.png","server4.png"};
  return ServletUriComponentsBuilder.fromCurrentContextPath().path("/server/images/"+ imageNames[new Random().nextInt(4)]).toUriString();
}

	CREANDO UNA CLASE RESPONSE PARA MEJORAR LA CONSISTENCIA DE MIS RESPUESTAS

Fijate que es buena idea realizar esto,independientemente del lenguaje o frame.
En este caso lucirá asi(observar Map<?,?> que aceptará cualquier cosa

// fijate que no es obligatorio crear una clase/modelo para las respuestas,pero si lo hago las respuestas quedan más consistentes
@Data
@SuperBuilder //crea el constructor private con el patrón Builder
@JsonInclude(value = JsonInclude.Include.NON_NULL) // para que no se envie nulos
public class Response {

  protected LocalDateTime timeStamp;
  protected int statusCode;
  protected HttpStatus status; <- viene de spring.http.HttpStatus
  protected String reason;
  protected String message;
  protected String developerMessage; // mensaje más técnico  
  protected Map<?,?> data; // mapa con cualquier tipo de dato
  
}
 
Creemos pues ya la clase que contenga los controladores.

					CREATING CONTROLLER

Fijate que aqui sale a relucir los beneficios de haber creado la clase/contrato anterior,ya que va a ir como genérico de ResponseEntity<Response>,dejandome mandar todas las propiedades que quiera en la respuesta que mandaré,dejandola altamente customizada.Fijate en que también eran protected por razones obvias:

@RestController
@RequestMapping("/server")
@RequiredArgsConstructor // crea el constructor e inyecta la dependency
public class ServerController {

  // de nuevo usamos inyección por constructor === @RequiredArgsConstructor
  private final ServerServiceImpl serverService;
  
  @GetMapping("/list")
  public ResponseEntity<Response> getServers() {
    return ResponseEntity.ok(
        Response.builder()
            .timeStamp(LocalDateTime.now())
            .data(Map.of("servers", serverService.list(10)))
            .message("Servers retrieved")
            .status(HttpStatus.OK)
            .statusCode(HttpStatus.OK.value())
            .build());
  }

Observa que si la prop se llamó  protected Map<?,?> data; aqui hago data(Map<?,?) y data espera un Map,obviamente.Sencillamente genial.

En cuanto al controlador + ruta para hacer ping,fijate que @PathVariable("Name") rescatará el pathParam llamado Name:

  @GetMapping("/ping/{ipAddress}")
  public ResponseEntity<Response> pingServer(
    @PathVariable("ipAddress") String ipAddress) throws IOException {
    Server server = serverService.ping(ipAddress);
    return ResponseEntity.ok(
        Response.builder()
            .timeStamp(LocalDateTime.now())
            .data(Map.of("servers", server))
            .message(server.getStatus() == Status.SERVER_UP ? "Ping success" : "Ping failed")
            .status(HttpStatus.OK)
            .statusCode(HttpStatus.OK.value())
            .build());
  }

Si tuviera @GetMapping("/client/{idClient}") tendría que rescatarlo así:
public ResponseEntity<Response> getClientById(@PathVariable("idClient") String idClient){ code...}

Para guardar el server me vendrá por el body:
 @PostMapping("/save")
  public ResponseEntity<Response> saveServer(@RequestBody @Valid Server  server) { code...}

NOTA:fijate que @Valid hará saltar esta validación del modelo:
@NotEmpty(message = "Ip Address cannot be empty or null")
private String ipAddress;

Dado que es un POST lo suyo es mandar httpStatus.CREATED,etc...

@PostMapping("/save")
  public ResponseEntity<Response> saveServer(@RequestBody @Valid Server  server) {
    return ResponseEntity.ok(
        Response.builder()
            .timeStamp(LocalDateTime.now())
            .data(Map.of("server", server))
            .message("Server created")
            .status(HttpStatus.CREATED) // 201
            .statusCode(HttpStatus.CREATED.value())
            .build());
  }

En cuanto al getOne fijate que rescato el PathVariable ya como un Long(pero no venia siempre como String en Java??):

  @GetMapping("/get/{id}")
  public ResponseEntity<Response> getServer(@PathVariable("id") Long id) {
    Server server = serverService.get(id);
    return ResponseEntity.ok(
         Response.builder()
            .timeStamp(LocalDateTime.now())
            .data(Map.of("server", server))
            .message("Server retrieved")
            .status(HttpStatus.OK) //200
            .statusCode(HttpStatus.OK.value())
            .build());
  }

Y para el delete casi lo mismo:

  @DeleteMapping("/delete/{id}")
  public ResponseEntity<Response> deleteServer(@PathVariable("id") Long id) {
    return ResponseEntity.ok(
         Response.builder()
            .timeStamp(LocalDateTime.now())
            .data(Map.of("server", serverService.delete(id)))
            .message("Server deleted successfully")
            .status(HttpStatus.OK) // 200
            .statusCode(HttpStatus.OK.value()) // 200
            .build());
  }
Fijate que cuando el código es consistente(crear la Response,abstracciones con los métodos correctos y servicios correctamente implementados) se vuelve muy fácil y repetitivo,incluso en Java.

			ACCEDIENDO AL GESTOR DE ARCHIVOS DEL SISTEMA OPERATIVO

Fijate que va a dejar las imagenes en downloads/images,ni siquiera las va a meter al proyecto.Para poder acceder aqui tendrá que hacer varios pasos.

  @GetMapping(path = "/image/{fileName}",produces = MediaType.IMAGE_PNG_VALUE)
  public byte[] getServerImage(@PathVariable("fileName") String fileName) throws IOException {
    return Files.readAllBytes(Paths.get(System.getProperty("user.home") + "/Downloads/images/" + fileName));
  }
Observa que Paths.get(System.getProperty("user.home") me situó en /home y observa como en las anotaciones no hace falta especificar el argumento path mientras no lleve un segundo argumento como este caso,que lleva produces.Fijate que pasará un array de bytes con la imagen.
Y observa que si las dejó en su SO tengo que usar las mias xd

					CREANDO MOCK DATA

Para crear fake data recuerda que puedo meter en la linea de comandos instrucciones desde el main file.Tengo que usar la clase CommandLineRunner y anotarla con @Bean.

	@Bean
	CommandLineRunner run(ServerRepo serverRepo){
		return args -> {
			serverRepo.save(new Server(
				null,
				"192.168.1.160",
				"Ubuntu Linux",
				"16 GB",
				"Personal PC",
				"http://localhost:8080/server/image/server1.png",
				Status.SERVER_UP
				));
		};
		// aqui pueden ir mas serverRepo.save...
	};

Sin embargo,me falta la conexión a la BBDD.

						CONEXION CON LA DB 59M

Simplemente me conecto al contenedor con el MySQL y creo otra DB.Compruebo en PostMan que pueda traer todos los servers,uno por Id,guardar,hacer Ping u obtener la imagen.Tras esto ya podemos ir al frontend usando Angular.


Creo una app con ng new(usaremos una aproximación reactiva).Aunque sea más difícil veré los beneficios de ello.Por ejemplo,la forma típica de hacer peticiones sería esta:

  getServers(): Observable<CustomResponse> {
    return this.http.get<CustomResponse>('/api/servers');
  }

Esto es una aproximación por procedimientos(procedural approach).Fijate como ha tipado el this.http poniendo delante <Observable<any>>this.http <- assertion type de la otra forma.Muy pro.

  // forma reactiva
  servers$ = <Observable<CustomResponse>>this.http.get<CustomResponse>(`${this.apiUrl}/servers/list`).pipe(
    tap<CustomResponse>(console.log),
      map<CustomResponse, any>((data) => {
        if (data.data.server) adaptServerDTO(data.data.server!);
        if (data.data.servers)
          data.data.servers.forEach((server) => adaptServerDTO(server));
        return data;
      }),
      catchError(this.handleError)
    );
    

  handleError(err: any): Observable<never> {
    return throwError('Error en el servicio');
  }

NOTA: fijate que const y readonly son lo mismo,sólo que const es para variables y readonly para propiedades/miembros de clase,pero debería usarlos siempre que pueda.

Types Partial<T>, Omit<T,properties> y Pick<T,properties>: dado un tipo T puedo omitir o coger propiedades de ese tipo con estos types.También puedo hacer una versión de un tipo T con Partial<T>(de nuevo es un type).

Bien,volviendo a la App,para guardar hago lo mismo,sólo que esta vez con un argumento:
  // guardar reactivamente un server 
  save$ = (server: ServerModel) => <Observable<CustomResponse>>this.http.post<CustomResponse>(`${this.apiUrl}/servers/save`, server).pipe(
    tap<CustomResponse>(console.log),
      map<CustomResponse, any>((data) => {
        if (data.data.server) adaptServerDTO(data.data.server!);
        if (data.data.servers)
          data.data.servers.forEach((server) => adaptServerDTO(server));
        return data;
      }),
      catchError(this.handleError)
    );

IMPORTANTE: no debo tipar el error como any nunca(y menos en una empresa).El error será de tipo HttpErrorResponse ya que es una petición:
 
 private handleError(err: HttpErrorResponse): Observable<never> {
    console.log(err);
    // fijate que si tipo el error como HttpErrorResponse tengo acceso al message y al statusCode,algo que necesitaré en un ambiente empresarial
    return throwError(`${err.status} - ${err.message}`);
  }
Si lo tipo asi tengo acceso al StatusCode devuelto y al message.

NOTA: fijate que el autor insiste en no poner strict a false en el tsconfig.json(ya que ese strict es un conjunto de reglas como noImplicitAny,alwaysStrict,strictFunctionTypes,etc).En realidad es un conjunto de reglas,que realmente no querré poner a false nunca.

IMPORTANTE: fijate como va a definir un Observable en el OnInit del comienzo de la App(en el App.component.ts) y asi tener la data lo primero de todo.Observa como usaré el pipe async para llamarlo(muy pro):

export class AppComponent implements OnInit {
  // creo una propiedad de tipo observable<AppState<T>>
  appState$!: Observable<AppState<CustomResponse>>;
  
  constructor(private serverService: ServerService) {}

  ngOnInit() {
    // llamo al servicio para obtener el estado de la aplicación(los servers)
    this.appState$ = this.serverService.servers$
    .pipe(
      map<CustomResponse,AppState<CustomResponse>>(response => ({
          dataState: DataState.LOADED_STATE,
          appData: response,
        })
      ),
      startWith<AppState<CustomResponse>>({ 
        dataState: DataState.LOADING_STATE,
      }),
      catchError(error => {
        return of({
          dataState: DataState.ERROR_STATE,
          error: error // puede resumirse pues son iguales
        });
      })
    );
  }
}

En la template me quedará usar el pipe | async appState$.Importante.

					ERROR DE CORS

En este punto ya quiero dejar corriendo el proceso del back,pero voy a tener un problema de CORS.Para solucionarlo en el archivo principal(donde tengo el CommandLineRunner) pego este código:

	@Bean
	public CorsFilter corsFilter() {
		UrlBasedCorsConfigurationSource urlBasedCorsConfigurationSource = new UrlBasedCorsConfigurationSource();
		CorsConfiguration corsConfiguration = new CorsConfiguration(); 
		corsConfiguration.setAllowCredentials(true);
		corsConfiguration.setAllowedOrigins(Arrays.asList("http://localhost:4200","http://localhost:3000"));
		corsConfiguration.setAllowedHeaders(Arrays.asList("Origin","Access-Control-Allow-Origin","Content-Type","Accept","Jwt-Token","Authorization","Origin, Accept","X-Requested-With","Access-Control-Request-Method","Access-Control-Request-Headers"));
		corsConfiguration.setExposedHeaders(Arrays.asList("Origin","Content-Type","Accept","Jwt-Token","Authorization","Access-Control-Allow-Origin","Access-Control-Allow-Credentials","Filename"));
		corsConfiguration.setAllowedMethods(Arrays.asList("GET","POST","PUT","DELETE","OPTIONS","PATCH"));
		urlBasedCorsConfigurationSource.registerCorsConfiguration("/**", corsConfiguration);
		return new CorsFilter(urlBasedCorsConfigurationSource);
	}

Fijate que abrí el localhost:3000 y el 4200 para cuando use React(obviamente cambiará cuando sea un dominio).Ahora si,ya puedo comunicar el front con el backend. Pero antes hago la petición al Observable en la template.De momento que sea algo tan simple como esto(fijate en el uso del pipe json):

<div>{{ appState$ | async | json }}</div>

Simplemente visito localhost:4200 y debería ver el getAllServers.Incluso veo el estado general de la App durante un segundo como LOADING_STATE.Para poder ver mejor esto puedo ir al backend y poner un Timeout al controlador del getServers:

 @GetMapping("/list")
  public ResponseEntity<Response> getServers() throws InterruptedException {
    TimeUnit.SECONDS.sleep(3);
    return ResponseEntity.ok(
        Response.builder()
            .timeStamp(LocalDateTime.now())
            .data(Map.of("servers", serverService.list(10)))
            .message("Servers retrieved")
            .status(HttpStatus.OK)
            .statusCode(HttpStatus.OK.value())
            .build());
  }
Lo puedo hacer con TimeUnit.SECONDS.sleep(3) <- dado que elegí SECONDS serán 3 seconds.Fijate que lanza excepción.En cuanto a la UI usó Bootstrap.Apenas son un par de tablas.
TIP: puedo ver que usa varios <ng-container>.Esta tag es como un <React.Fragment>no indica nada,es un simple <div> en bloque,obviamente,pero me sirve para separar el código semánticamente | mejorar legibilidad del HTML.

TIP: puedo usar aserción de tipos en una template de Angular(xxx as otherName) cuando quiera usar otro nombre en algo.Por ejemplo,no queremos en la template que se llame appState$ con el simbolo al final
*ngIf="(appState$ | async) as appState"

Fijate la <td> para el Status que bien le ha quedado:
   <td>
     <span class="badge"
       [ngClass]="[server.status === Status.SERVER_UP ? ' badge-success' : ' badge-danger']">
      {{ server.status === Status.SERVER_UP ? 'SERVER UP' : 'SERVER DOWN' }}
     </span>
   </td>

Recuerda que con [ngClass]="[var === true ? ' class1': ' class2']" puedo meter clases en base a una condicion

				CREANDO OBSERVABLES PROPIOS - BEHAVIOUR SUBJECTS

Fijate que quiero crear un Observable,pero lo quiero en multicasting y con un valor inicial,asi que en vez de hacer obs$ = new Observable lo que hago es crear una instancia de la clase BehaviourSubject y despues a esa instancia le paso el asObservable():

filterSubject = new BehaviourSubject<string>(''); <- strings pues es para almacenar las ipAddress que son strings
$filterStatus = this.filterSubject.asObservable()

Despues,cada vez que una Entity Server llame al método pingServer añado un valor(ojo,se añade al filterSubject):

  pingServer(ipAddress: string) {
    this.filterSubject.next(ipAddress);

Fijate como ha tenido que meter el Observable entre parentesis para negarlo:
  <span *ngIf="isLoading$ | async">Saving...</span>
  <span *ngIf="!(isLoading$ | async)">Add</span>
Y lo mismo para desactivar el botón de submit:
  <button type="submit" [disabled]="serverForm.invalid || (isLoading$ | async)" class="btn btn-success">
Muy pro el pro. 

					GENERATING A REPORT

IMPORTANTE: fijate que el autor se tomó su tiempo diseñando la aplicación.Esto es algo que debo interiorizar,siempre debe haber un diseño previo a desarrollar una aplicación en la que decida los endpoints,la DB,los modelos,estilos del front,etc... Sin un diseño previo una app seguramente está condenada a fallar. 

NOTA: puedo mandarlo a un Excel o puedo guardarlo como PDF,lo segundo es realmente simple,ya que simplemente con usar window.print() me llevará al menu de impresión y en destino puedo guardarlo como PDF:

  printReport(){
    /* si quisiera guardarlo como PDF desde el menu de impresión lo puedo guardar como PDF.Fijate que saber esto es importante. */
    window.print();
    return;
    /* para generar un Excel necesito el dataType,despues buscar en el DOM la tabla */
    let dataType = 'application/vnd.ms-excel.sheet.macroEnabled.12';
    /* hay que reemplazar los espacios con la  HTMLEntity */
    let tableSelect = document.getElementById("servers");
    let tableHtml = tableSelect?.outerHTML.replace(/ /g,'%20');
    let downloadLink = document.createElement('a');
    document.body.appendChild(downloadLink);
    downloadLink.href = 'data:' + dataType + ', ' + tableHtml;
    downloadLink.download = 'server-report.xls';
    // tras hacer el click borro el <anchor>
    downloadLink.click();
    document.body.removeChild(downloadLink);
  }

					NOTIFICACIONES

Para las notificaciones,dado que estoy en Angular,voy a usar la lib 'angular-notifier',la cual es muy usada,customizable y fácil de usar.Para instalarla:

>npm i angular-notifier && ng s <- instalo y levanto el server de nuevo

Para hacerla accesible globalmente hay que añadir el NotifierModule al módulo general en los imports.Sin embargo,es muy común pasarle una config:

@NgModule({
  imports: [
   ... 
   NotifierModule.withConfig({
    ...config })
]
Despues hay que usar el componente <notifier-container> en la template.Se recomienda hacerlo en la última linea de la template app.component.html

Sin embargo,aqui crearemos un modulo entero para las notificaciones y lo importaremos en cada uno que las quiera usar,haciendolo más eficiente que importarlo en todos.

En un archivo notifier.module.ts:

mport { NgModule } from '@angular/core';
import { NotifierModule, NotifierOptions } from 'angular-notifier';

const customNotifierOptions: NotifierOptions = {
  position: {
    horizontal: {
      position: 'left',
      distance: 150,
    },
    vertical: {
      position: 'bottom',
      distance: 12,
      gap: 10,
    },
  },
  theme: 'material',
  behaviour: {
    autoHide: 5000,
    onClick: 'hide',
    onMouseover: 'pauseAutoHide',
    showDismissButton: true,
    stacking: 4,
  },
  animations: {
    enabled: true,
    show: {
      preset: 'slide',
      speed: 300,
      easing: 'ease',
    },
    hide: {
      preset: 'fade',
      speed: 300,
      easing: 'ease',
      offset: 50,
    },
    shift: {
      speed: 300,
      easing: 'ease',
    },
    overlap: 150,
  },
};

@NgModule({
  imports: [NotifierModule.withConfig(customNotifierOptions)],
  exports: [NotifierModule],
})
export class NotificationModule {}
Fijate como he creado un modulo que se importa hacia si mismo la libreria y la exporta,de esta forma pueden pedir esta libreria quienes quieran y no obligo a que todo modulo la importe.Muy bueno,joder,asinto.

IMPORTANTE: aún faltan los estilos(que los tengo en node_modules/libreria).Simplemente los requiero desde alli con @import ruta en el styles.css.Fijate que esto es básico:

@import '~angular-notifier/styles'; <- la ~ representa node_modules y no necesito que sea ~/angular-notifier/styles,puedo omitir la '/' despues de ~.

Despues puedo usarlo inyectando el Service que ya trae la libreria:
  // forma UNO para el angular-notifier
  private readonly notifier: NotifierService;

  constructor(
    private serverService: ServerService,
    private notifierService: NotifierService
  ) {
    this.notifier = notifierService;
  }

Y realmente no hace falta crear una propiedad,con esto me vale:
constructor( private notifier: NotifierService) <- más simple,que crear una propiedad para asignarle otra,accedo por la inyectada y ya.

this.notifier.notify('success', 'Servers loaded');

Y nosotros lo que vamos a hacer es crear nuestro propio Servicio(que inyectará al suyo y expondrá varios tipos de notification).

import { Injectable } from "@angular/core";
import { NotifierService } from "angular-notifier";

@Injectable({ providedIn: "root", })
export class NotificationService {
  private readonly notifier: NotifierService;

  constructor(notifierService: NotifierService) {
    this.notifier = notifierService;
  }

  onDefault(message: string): void {
    this.notifier.notify(TypeOfNotification.DEFAULT, message);
  }

  onSuccess(message: string): void {
    this.notifier.notify(TypeOfNotification.SUCCESS, message);
  }

  onError(message: string): void {
    this.notifier.notify(TypeOfNotification.ERROR, message);
  }

  onWarning(message: string): void {
    this.notifier.notify(TypeOfNotification.WARNING, message);
  }

  onInfo(message: string): void {
    this.notifier.notify(TypeOfNotification.INFO, message);
  }
}

enum TypeOfNotification {
  DEFAULT = "default",
  SUCCESS = "success",
  ERROR = "error",
  WARNING = "warning",
  INFO = "info",
}
De nuevo puedo observar como se puede programar lo que se quiera,con el conocimiento adecuado.En este caso cogemos un Service built-in y le wrapeamos el nuestro.Fijate que también creé un modulo para un Module cualquiera que lo importa y exporta haciendo la elección de importarlo que recaiga en cada modulo,en vez de forzada como venia.

					CHANGE DETECTION STRATEGIES

NOTA: los beneficios de la programación reactiva son un menor numero de accesos alas comprobaciones de cambios en Angular(y seguramente en React).
Esto se puede ver ya que cambiamos de strategy al usar Observables:

DEFAULT STRATEGY				ONPUSH
checkAlways strategy            @Input
check for every change          Event Emits
								Observable Emits

Puedo ver que los beneficios de usar programación reactiva son un cambio en la estrategia que usará el framework para detectar los cambios.En resumen,si uso programación reactiva los disparo yo,y no tiene que estar Angular comprobando todo(entiendo que comprobará muchas cosas si le dejo a él hacerlo)
TIP: recuerda que el pipe async es parte de un approach reactivo


IMPORTANTE: tengo que cambiar la estrategia en el componente(ChangeDetectionStrategy viene de @angular/core:
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class AppComponent implements OnInit {
name = 'Junior'; <- importante,con esta estrategia cualquier reasignación no la va a pillar Angular,sólo va a coger la primera asignación(es como que ya no va a mirar por los cambios él,sino que los disparo yo con EventEmitters,Observables y @Input).Investigar más.Investigar como se hace esto en React

NOTA sobre React.Memo: React.memo hace una 'shallow comparison' de las props de un componente.Si no cambiaron renderizará la ultima copia en memoria,en vez de re-renderizar el componente y sus calculos asociados a esto.Fijate que si un componente memorizado tiene useState,o useReducer o useContext/useSelector(acceso al store) y esto cambia,disparará un re-render en el componente,independiente de si las props son iguales,el re-render ocurrirá.Además,la comparación no es profunda,aunque puedo arreglarlo pasando una funcion comparadora al React.memo:
export default React.memo(MyComponent,areEqual);

function areEqual(prevProps, nextProps){
  ...
} <- comprobar en nuestro proyecto cuando puedo memorizar un componente y sea eficiente porque las props no cambien.Diria que en varios lados.

NOTA: obviamente Angular está en ChangeDetectionStrategy.DEFAULT por defecto

Por último,este aproach de programación reactiva + cambio de estrategia realmente no es necesario en aplicaciones pequeñas,que no tengan carga,ya que irán fluidas per se.Estamos hablando de apps grandes y no lo que hemos hecho.
